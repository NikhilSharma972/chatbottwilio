{"code":"import { utils } from '@builderbot/bot';\nimport mime from 'mime-types';\nimport EventEmitter from 'node:events';\nimport { existsSync, createReadStream } from 'node:fs';\nimport twilio from 'twilio';\nimport { parseNumber } from '../utils';\n/**\n * Class representing TwilioCoreVendor, a vendor class for meta core functionality.\n * @extends EventEmitter\n */\nexport class TwilioCoreVendor extends EventEmitter {\n    constructor(globalVendorArgs) {\n        super();\n        /**\n         * Middleware function for indexing home.\n         * @type {polka.Middleware}\n         */\n        this.indexHome = (_, res) => {\n            res.end('running ok');\n        };\n        /**\n         * Middleware function for handling incoming messages.\n         * @type {polka.Middleware}\n         */\n        this.incomingMsg = (req, res) => {\n            const body = req.body;\n            const payload = {\n                ...req.body,\n                from: parseNumber(body.From),\n                to: parseNumber(body.To),\n                host: parseNumber(body.To),\n                body: body.Body,\n                name: `${body?.ProfileName}`,\n            };\n            if (body?.NumMedia !== '0' && body?.MediaContentType0) {\n                const type = body?.MediaContentType0.split('/')[0];\n                switch (type) {\n                    case 'audio':\n                        payload.body = utils.generateRefProvider('_event_voice_note_');\n                        break;\n                    case 'image':\n                    case 'video':\n                        payload.body = utils.generateRefProvider('_event_media_');\n                        break;\n                    case 'application':\n                        payload.body = utils.generateRefProvider('_event_document_');\n                        break;\n                    case 'text':\n                        payload.body = utils.generateRefProvider('_event_contacts_');\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else {\n                if (body.Latitude && body.Longitude) {\n                    payload.body = utils.generateRefProvider('_event_location_');\n                }\n            }\n            this.emit('message', payload);\n            const jsonResponse = JSON.stringify({ body });\n            res.status(200).end();\n        };\n        /**\n         * Manejar los local media como\n         * C:\\\\Projects\\\\bot-restaurante\\\\tmp\\\\menu.png\n         * para que puedas ser llevar a una url online\n         * @param req\n         * @param res\n         */\n        this.handlerLocalMedia = (req, res) => {\n            const query = req.query;\n            const file = query?.path;\n            if (!file)\n                return res.end(`path: invalid`);\n            const decryptPath = utils.decryptData(file);\n            const decodeFile = decodeURIComponent(decryptPath);\n            if (!existsSync(decodeFile))\n                return res.end(`not exits: ${decodeFile}`);\n            const fileStream = createReadStream(decodeFile);\n            const mimeType = mime.lookup(decodeFile) || 'application/octet-stream';\n            res.writeHead(200, { 'Content-Type': mimeType });\n            fileStream.pipe(res);\n        };\n        this.twilio = twilio(globalVendorArgs.accountSid, globalVendorArgs.authToken);\n        const host = {\n            phone: parseNumber(globalVendorArgs.vendorNumber),\n        };\n        this.emit('host', host);\n    }\n}\n","references":["/Users/nikhilsharma/Desktop/builderbot/packages/bot/dist/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/node_modules/.pnpm/@types+mime-types@2.1.4/node_modules/@types/mime-types/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/node_modules/.pnpm/@types+polka@0.5.7/node_modules/@types/polka/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/node_modules/.pnpm/twilio@4.20.1/node_modules/twilio/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/src/types.ts","/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/src/utils.ts"],"dtsmap":{"name":"/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/node_modules/.cache/rollup-plugin-typescript2/placeholder/twilio/core.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"core.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/twilio/core.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,YAAY,MAAM,aAAa,CAAA;AAEtC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,MAAM,MAAM,QAAQ,CAAA;AAE3B,OAAO,KAAK,EAAE,mBAAmB,EAAoC,MAAM,UAAU,CAAA;AAGrF;;;GAGG;AACH,qBAAa,gBAAiB,SAAQ,YAAY;IACvC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAA;gBAEhB,gBAAgB,EAAE,mBAAmB;IASjD;;;OAGG;IACI,SAAS,EAAE,KAAK,CAAC,UAAU,CAEjC;IACD;;;OAGG;IACI,WAAW,EAAE,KAAK,CAAC,UAAU,CAuCnC;IAED;;;;;;OAMG;IACI,iBAAiB,EAAE,KAAK,CAAC,UAAU,CAWzC;CACJ\"}"},"dts":{"name":"/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/node_modules/.cache/rollup-plugin-typescript2/placeholder/twilio/core.d.ts","writeByteOrderMark":false,"text":"import EventEmitter from 'node:events';\nimport type polka from 'polka';\nimport twilio from 'twilio';\nimport type { ITwilioProviderARgs } from '../types';\n/**\n * Class representing TwilioCoreVendor, a vendor class for meta core functionality.\n * @extends EventEmitter\n */\nexport declare class TwilioCoreVendor extends EventEmitter {\n    twilio: twilio.Twilio;\n    constructor(globalVendorArgs: ITwilioProviderARgs);\n    /**\n     * Middleware function for indexing home.\n     * @type {polka.Middleware}\n     */\n    indexHome: polka.Middleware;\n    /**\n     * Middleware function for handling incoming messages.\n     * @type {polka.Middleware}\n     */\n    incomingMsg: polka.Middleware;\n    /**\n     * Manejar los local media como\n     * C:\\\\Projects\\\\bot-restaurante\\\\tmp\\\\menu.png\n     * para que puedas ser llevar a una url online\n     * @param req\n     * @param res\n     */\n    handlerLocalMedia: polka.Middleware;\n}\n//# sourceMappingURL=core.d.ts.map"}}
