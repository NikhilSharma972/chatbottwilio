{"code":"import { ProviderClass, utils } from '@builderbot/bot';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { TwilioCoreVendor } from './core';\nimport { parseNumberFrom } from '../utils';\n/**\n * A class representing a TwilioProvider for interacting with Twilio messaging service.\n * @extends ProviderClass\n * @implements {TwilioInterface}\n */\nclass TwilioProvider extends ProviderClass {\n    constructor(args) {\n        super();\n        /**\n         * Event handlers for bus events.\n         */\n        this.busEvents = () => [\n            {\n                event: 'auth_failure',\n                func: (payload) => this.emit('auth_failure', payload),\n            },\n            {\n                event: 'ready',\n                func: () => this.emit('ready', true),\n            },\n            {\n                event: 'message',\n                func: (payload) => {\n                    this.emit('message', payload);\n                },\n            },\n            {\n                event: 'host',\n                func: (payload) => {\n                    this.emit('host', payload);\n                },\n            },\n        ];\n        /**\n         * Sends media content via Twilio.\n         * @param {string} number - The recipient's phone number.\n         * @param {string} [message=''] - The message to be sent.\n         * @param {string} mediaInput - The media input to be sent.\n         * @returns {Promise<any>} A Promise that resolves when the media is sent.\n         */\n        this.sendMedia = async (number, message = '', mediaInput) => {\n            const entryPointUrl = this.globalVendorArgs?.publicUrl ?? `http://localhost:${this.globalVendorArgs.port}`;\n            if (!mediaInput)\n                throw new Error(`Media cannot be null`);\n            const encryptPath = utils.encryptData(encodeURIComponent(mediaInput));\n            const urlEncode = `${entryPointUrl}/tmp?path=${encryptPath}`;\n            const regexUrl = /^(?!https?:\\/\\/)[^\\s]+$/;\n            const instructions = [\n                `You are trying to send a file that is local.`,\n                `For this to work with Twilio, the file needs to be in a public URL.`,\n                `More information here https://builderbot.vercel.app/en/twilio/uses-cases`,\n                `This is the URL that will be sent to Twilio (must be public)`,\n                ``,\n                `${urlEncode}`,\n            ];\n            if (mediaInput.includes('localhost') ||\n                mediaInput.includes('127.0.0.1') ||\n                mediaInput.includes('0.0.0.0') ||\n                regexUrl.test(mediaInput)) {\n                mediaInput = urlEncode;\n                this.emit('notice', {\n                    title: 'ðŸŸ   WARNING ðŸŸ ',\n                    instructions,\n                });\n            }\n            try {\n                const twilioQueue = this.vendor.twilio.messages.create({\n                    mediaUrl: [`${mediaInput}`],\n                    body: message,\n                    from: parseNumberFrom(this.globalVendorArgs.vendorNumber),\n                    to: parseNumberFrom(number),\n                });\n                return twilioQueue;\n            }\n            catch (err) {\n                console.log(`Error Twilio:`, err);\n            }\n        };\n        /**\n         * Sends buttons via Twilio.\n         * @returns {Promise<void>} A Promise that resolves when buttons are sent.\n         */\n        this.sendButtons = async () => {\n            this.emit('notice', {\n                title: 'ðŸ“ƒ INFO ðŸ“ƒ',\n                instructions: [\n                    `Twilio presents a different way to implement buttons and lists`,\n                    `To understand more about how it works, I recommend you check the following URLs`,\n                    `https://builderbot.vercel.app/en/providers/twilio/uses-cases`,\n                ],\n            });\n        };\n        /**\n         *\n         * @param number\n         * @param message\n         * @returns\n         */\n        this.send = async (number, message, options) => {\n            const response = await this.vendor.twilio.messages.create({\n                ...options,\n                body: message,\n                from: parseNumberFrom(this.globalVendorArgs.vendorNumber),\n                to: parseNumberFrom(number),\n            });\n            return response;\n        };\n        /**\n         * Sends a message via Twilio.\n         * @param {string} number - The recipient's phone number.\n         * @param {string} message - The message to be sent.\n         * @param {SendOptions} [options] - The options for sending the message.\n         * @returns {Promise<any>} A Promise that resolves when the message is sent.\n         */\n        this.sendMessage = async (number, message, options) => {\n            options = { ...options, ...options['options'] };\n            if (options?.buttons?.length)\n                await this.sendButtons();\n            if (options?.media)\n                return this.sendMedia(number, message, options.media);\n            const response = this.vendor.twilio.messages.create({\n                body: message,\n                from: parseNumberFrom(this.globalVendorArgs.vendorNumber),\n                to: parseNumberFrom(number),\n            });\n            return response;\n        };\n        /**\n         * Saves a file received via Twilio.\n         * @param {Partial<TwilioRequestBody & BotContext>} ctx - The context containing the received file.\n         * @param {{ path: string }} [options] - The options for saving the file.\n         * @returns {Promise<string>} A Promise that resolves with the saved file path.\n         */\n        this.saveFile = async (ctx, options) => {\n            try {\n                const basicAuthToken = Buffer.from(`${this.globalVendorArgs.accountSid}:${this.globalVendorArgs.authToken}`).toString('base64');\n                const twilioHeaders = {\n                    Authorization: `Basic ${basicAuthToken}`,\n                };\n                const pathFile = join(options?.path ?? tmpdir());\n                const localPath = await utils.generalDownload(`${ctx?.MediaUrl0}`, pathFile, twilioHeaders);\n                return localPath;\n            }\n            catch (err) {\n                console.log(`[Error]:`, err);\n                return 'ERROR';\n            }\n        };\n        this.globalVendorArgs = {\n            accountSid: undefined,\n            authToken: undefined,\n            vendorNumber: undefined,\n            name: 'bot',\n            port: 3000,\n            writeMyself: 'none',\n        };\n        this.globalVendorArgs = { ...this.globalVendorArgs, ...args };\n    }\n    /**\n     * Initialize the vendor for TwilioProvider.\n     * @returns {Promise<any>} A Promise that resolves when vendor is initialized.\n     * @protected\n     */\n    async initVendor() {\n        const vendor = new TwilioCoreVendor(this.globalVendorArgs);\n        this.vendor = vendor;\n        return Promise.resolve(vendor);\n    }\n    beforeHttpServerInit() {\n        this.server = this.server\n            .use((req, _, next) => {\n            req['globalVendorArgs'] = this.globalVendorArgs;\n            return next();\n        })\n            .post('/', this.vendor.indexHome)\n            .post('/webhook', this.vendor.incomingMsg)\n            .get('/tmp', this.vendor.handlerLocalMedia);\n    }\n    afterHttpServerInit() { }\n}\nexport { TwilioProvider };\n","references":["/Users/nikhilsharma/Desktop/builderbot/packages/bot/dist/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/packages/bot/dist/types.d.ts","/Users/nikhilsharma/Desktop/builderbot/node_modules/.pnpm/twilio@4.20.1/node_modules/twilio/lib/rest/api/v2010/account/message.d.ts","/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/src/twilio/core.ts","/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/src/interface/twilio.ts","/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/src/types.ts","/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/src/utils.ts"],"dtsmap":{"name":"/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/node_modules/.cache/rollup-plugin-typescript2/placeholder/twilio/provider.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"provider.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/twilio/provider.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,aAAa,EAAS,MAAM,iBAAiB,CAAA;AACtD,OAAO,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAA;AAGzE,OAAO,KAAK,EAAE,gCAAgC,EAAE,MAAM,2CAA2C,CAAA;AAEjG,OAAO,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAA;AACzC,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAA;AAC1D,OAAO,KAAK,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAA;AAEtE;;;;GAIG;AACH,cAAM,cAAe,SAAQ,aAAa,CAAC,gBAAgB,CAAE,YAAW,eAAe;IACnF,gBAAgB,EAAE,mBAAmB,CAAA;gBAEzB,IAAI,EAAE,mBAAmB;IAarC;;;;OAIG;cACa,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;IAM1C,SAAS,CAAC,oBAAoB,IAAI,IAAI;IAWtC,SAAS,CAAC,mBAAmB,IAAI,IAAI;IAErC;;OAEG;IACH,SAAS;;wBAGe,GAAG;QAkB1B;IAED;;;;;;OAMG;IACH,SAAS,WAAkB,MAAM,WAAW,MAAM,cAAmB,MAAM,KAAG,OAAO,CAAC,GAAG,CAAC,CAyCzF;IAED;;;OAGG;IACH,WAAW,QAAa,OAAO,CAAC,IAAI,CAAC,CASpC;IAED;;;;;OAKG;IACH,IAAI,WAAkB,MAAM,WAAW,MAAM,YAAY,gCAAgC,KAAG,OAAO,CAAC,GAAG,CAAC,CAQvG;IAED;;;;;;OAMG;IACH,WAAW,WAAkB,MAAM,WAAW,MAAM,YAAY,WAAW,KAAG,OAAO,CAAC,GAAG,CAAC,CAUzF;IAED;;;;;OAKG;IACH,QAAQ,QAAe,OAAO,CAAC,iBAAiB,GAAG,UAAU,CAAC,YAAY;QAAE,IAAI,EAAE,MAAM,CAAA;KAAE,KAAG,OAAO,CAAC,MAAM,CAAC,CAe3G;CACJ;AAED,OAAO,EAAE,cAAc,EAAE,CAAA\"}"},"dts":{"name":"/Users/nikhilsharma/Desktop/builderbot/packages/provider-twilio/node_modules/.cache/rollup-plugin-typescript2/placeholder/twilio/provider.d.ts","writeByteOrderMark":false,"text":"import { ProviderClass } from '@builderbot/bot';\nimport type { BotContext, SendOptions } from '@builderbot/bot/dist/types';\nimport type { MessageListInstanceCreateOptions } from 'twilio/lib/rest/api/v2010/account/message';\nimport { TwilioCoreVendor } from './core';\nimport type { TwilioInterface } from '../interface/twilio';\nimport type { ITwilioProviderARgs, TwilioRequestBody } from '../types';\n/**\n * A class representing a TwilioProvider for interacting with Twilio messaging service.\n * @extends ProviderClass\n * @implements {TwilioInterface}\n */\ndeclare class TwilioProvider extends ProviderClass<TwilioCoreVendor> implements TwilioInterface {\n    globalVendorArgs: ITwilioProviderARgs;\n    constructor(args: ITwilioProviderARgs);\n    /**\n     * Initialize the vendor for TwilioProvider.\n     * @returns {Promise<any>} A Promise that resolves when vendor is initialized.\n     * @protected\n     */\n    protected initVendor(): Promise<any>;\n    protected beforeHttpServerInit(): void;\n    protected afterHttpServerInit(): void;\n    /**\n     * Event handlers for bus events.\n     */\n    busEvents: () => {\n        event: string;\n        func: (payload: any) => void;\n    }[];\n    /**\n     * Sends media content via Twilio.\n     * @param {string} number - The recipient's phone number.\n     * @param {string} [message=''] - The message to be sent.\n     * @param {string} mediaInput - The media input to be sent.\n     * @returns {Promise<any>} A Promise that resolves when the media is sent.\n     */\n    sendMedia: (number: string, message: string, mediaInput: string) => Promise<any>;\n    /**\n     * Sends buttons via Twilio.\n     * @returns {Promise<void>} A Promise that resolves when buttons are sent.\n     */\n    sendButtons: () => Promise<void>;\n    /**\n     *\n     * @param number\n     * @param message\n     * @returns\n     */\n    send: (number: string, message: string, options?: MessageListInstanceCreateOptions) => Promise<any>;\n    /**\n     * Sends a message via Twilio.\n     * @param {string} number - The recipient's phone number.\n     * @param {string} message - The message to be sent.\n     * @param {SendOptions} [options] - The options for sending the message.\n     * @returns {Promise<any>} A Promise that resolves when the message is sent.\n     */\n    sendMessage: (number: string, message: string, options?: SendOptions) => Promise<any>;\n    /**\n     * Saves a file received via Twilio.\n     * @param {Partial<TwilioRequestBody & BotContext>} ctx - The context containing the received file.\n     * @param {{ path: string }} [options] - The options for saving the file.\n     * @returns {Promise<string>} A Promise that resolves with the saved file path.\n     */\n    saveFile: (ctx: Partial<TwilioRequestBody & BotContext>, options?: {\n        path: string;\n    }) => Promise<string>;\n}\nexport { TwilioProvider };\n//# sourceMappingURL=provider.d.ts.map"}}
